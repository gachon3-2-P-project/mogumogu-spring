spring:
  main:
    web-application-type: reactive
  application:
    name: gateway-service
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: ${aws.db.url}
#    username: ${aws.db.username}
#    password: ${aws.db.password}
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
      globalcors:
          cors-configurations:
            '[/**]':
              allowedOrigins: ['http://localhost:3000', 'http://dana-seo.shop:3000']
              allow-credentials: true # JWT 나 쿠키를 사용해 메시지를 보내야 할 경우 true
              allowedHeaders: '*'
              allowedMethods: # 메서드를 명시하지 않으면 안되는 경우도 있기 때문에 메서드는 명시해주는 편이 좋다고 한다.
                - PUT
                - GET
                - POST
                - DELETE
                - OPTIONS
                - PATCH
      routes:
        - id: article-service # article-service/로 요청이 들어오면
          uri: lb://ARTICLE-SERVICE # 유레카 서버에서 article-service를 찾아서 그 곳으로 요청을 보낸다.
          predicates:
            - Path=/api/article/**
          filters:
            # url 재정의
            # ?<변수명>은 뒤에 나오는 정규식을 변수처럼 사용할 수 있도록 한다. ()는 하나의 묶음 처리 -> segment는 (.*)를 의미
            # 콤마(,)를 기준으로 왼쪽 url을 오른쪽 url로 재정의한다.
            # 콤마 기준 오른쪽 부분은 ${변수명}으로 url 가져오고 앞에 / 붙여준거라고 보면 된다.
            - RewritePath=/api/article/(?<segment>.*), /$\{segment}
        - id: join-service # article-service/로 요청이 들어오면
          uri: lb://JOIN-SERVICE
          predicates:
            - Path=/api/join/**
          filters:
            - RewritePath=/api/join/(?<segment>.*), /$\{segment}
        - id: message-service
          uri: lb://MESSAGE-SERVICE
          predicates:
            - Path=/api/message/**
          filters:
            - RewritePath=/api/message/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/user/**
          filters:
            - RewritePath=/api/user/(?<segment>.*), /$\{segment}
#jwt:
#  secret: 가천모구모구
#  expiration-time: 864000000 # 10 days
#  token-prefix: Bearer
#  header-string: joinorization
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka:8761/eureka/
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

server:
  port: 8080